import numpy as np
import matplotlib.pyplot as plt

# Benchmark Functions
def rastrigin(x):
    return 10 * len(x) + np.sum(x ** 2 - 10 * np.cos(2 * np.pi * x))

def sphere(x):
    return np.sum(x ** 2)

def rosenbrock(x):
    return np.sum(100 * (x[1:] - x[:-1] ** 2) ** 2 + (1 - x[:-1]) ** 2)

def griewank(x):
    return 1 + np.sum(x ** 2) / 4000 - np.prod(np.cos(x / np.sqrt(np.arange(1, len(x) + 1))))

def ackley(x):
    return -20 * np.exp(-0.2 * np.sqrt(np.sum(x ** 2) / len(x))) - np.exp(
        np.sum(np.cos(2 * np.pi * x)) / len(x)) + 20 + np.exp(1)

# Retrieve Function Details
def Get_F_details(F):
    if F == 'rastrigin':
        return rastrigin, 30, -5.12, 5.12
    elif F == 'sphere':
        return sphere, 30, -100, 100
    elif F == 'rosenbrock':
        return rosenbrock, 30, -5, 10
    elif F == 'griewank':
        return griewank, 30, -600, 600
    elif F == 'ackley':
        return ackley, 30, -32.768, 32.768
    else:
        raise ValueError("Invalid function name")

def VPPSO(Function_name, max_iteration):
    # Phase 1: Function Details Retrieval
    fobj, dim, lb, ub = Get_F_details(Function_name)

    # Phase 2: Initialization Phase
    N = 15
    NT = N + 15

    w_Max = 0.9
    w_Min = 0.1

    c1 = 2
    c2 = 2

    X_min = lb * np.ones(dim)
    X_max = ub * np.ones(dim)
    V_max = 0.1 * (ub - lb) * np.ones(dim)
    V_min = -V_max

    gbest_fitness = np.inf

    Position = np.zeros((NT, dim))
    Velocity = np.zeros((NT, dim))
    fitness = np.zeros(NT)
    Pbest = np.zeros((NT, dim))
    Pbest_finess = np.zeros(NT)

    # Phase 3: Particle Initialization
    for i in range(N):
        Position[i, :] = X_min + (X_max - X_min) * np.random.rand(dim)
        Velocity[i, :] = np.zeros(dim)

        fitness[i] = fobj(Position[i, :])
        Pbest[i, :] = Position[i, :]
        Pbest_finess[i] = fitness[i]

        if Pbest_finess[i] < gbest_fitness:
            gbest = Pbest[i, :]
            gbest_fitness = Pbest_finess[i]

    Fitness_Curve = np.zeros(max_iteration)

    # Phase 4: Main Iteration Loop
    for t in range(max_iteration):
        # Phase 5: Update Inertia Weight
        ww = np.exp(-(2.5 * t / max_iteration) ** 2.5)

        # Phase 6: Update Particle Positions and Velocities
        for i in range(N):
            if np.random.rand() < 0.3:
                Velocity[i, :] = np.abs(Velocity[i, :]) ** (np.random.rand() * ww) + \
                                 np.random.rand() * c1 * (Pbest[i, :] - Position[i, :]) + \
                                 np.random.rand() * c2 * (gbest - Position[i, :])

                # Velocity clamping
                Velocity[i, :] = np.maximum(np.minimum(Velocity[i, :], V_max), V_min)

            Position[i, :] = Position[i, :] + Velocity[i, :]

            # Apply boundary constraints
            Position[i, :] = np.maximum(np.minimum(Position[i, :], ub), lb)

        # Phase 7: Update New Particles
        for i in range(N, NT):
            for j in range(dim):
                CC = ww * np.random.rand() * np.abs(gbest[j]) ** ww

                if np.random.rand() < 0.5:
                    Position[i, j] = gbest[j] + CC
                else:
                    Position[i, j] = gbest[j] - CC

            Position[i, :] = np.maximum(np.minimum(Position[i, :], ub), lb)

            fitness[i] = fobj(Position[i, :])

            # Phase 8: Update Personal and Global Bests
            if i < N:
                if fitness[i] < Pbest_finess[i]:
                    Pbest[i, :] = Position[i, :]
                    Pbest_finess[i] = fitness[i]

                    if Pbest_finess[i] < gbest_fitness:
                        gbest = Pbest[i, :]
                        gbest_fitness = Pbest_finess[i]
            else:
                if fitness[i] < gbest_fitness:
                    gbest = Position[i, :]
                    gbest_fitness = fitness[i]

        # Phase 9: Store Convergence Data
        # Store the current global best fitness after each iteration
        Fitness_Curve[t] = gbest_fitness

    # Phase 10: Return Results
    return gbest_fitness, gbest, Fitness_Curve

# User interaction for function selection and optimization
while True:
    print("Select a function:")
    print("1. Rastrigin")
    print("2. Sphere")
    print("3. Rosenbrock")
    print("4. Griewank")
    print("5. Ackley")
    print("6. Exit")

    choice = int(input("Enter the number corresponding to the function (or 6 to exit): "))

    if choice == 6:
        print("Exiting...")
        break

    if choice >= 1 and choice <= 5:
        function_names = ['rastrigin', 'sphere', 'rosenbrock', 'griewank', 'ackley']
        selected_function = function_names[choice - 1]

        # Set random seed for reproducibility
        np.random.seed(42)

        # Retrieve the selected function and perform optimization
        Function_name = selected_function
        max_iteration = 100
        gbest_fitness, gbest, Fitness_Curve = VPPSO(Function_name, max_iteration)

        # Display optimization results
        print("Final gbest_fitness:", gbest_fitness)
        print("Final gbest:", gbest)

        # Find the iteration at which convergence occurs
        convergence_iteration = np.argmax(Fitness_Curve == gbest_fitness)
        print("Convergence occurred at iteration:", convergence_iteration + 1)

        # Plot the convergence curve and mark the convergence point
        plt.plot(Fitness_Curve)
        plt.title('Convergence curve')
        plt.xlabel('Iteration')
        plt.ylabel('Best Fitness')
        plt.axvline(x=convergence_iteration, color='r', linestyle='--', label='Convergence Point')
        plt.legend()
        plt.show()
    else:
        print("Invalid choice. Please select a valid option.")
